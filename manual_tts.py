"""
Manual TTS - Ch∆∞∆°ng tr√¨nh chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i
Ch·∫°y: python manual_tts.py
"""

import os
import sys
import logging
import time
from datetime import datetime
from colorama import init, Fore, Style

# Initialize colorama for Windows
init()

# Add utils to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))

try:
    from config import *
    from utils.azure_tts_service import AzureTTSService
    from utils.metrics import MetricsCollector
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üìã Make sure to install required packages: pip install -r requirements.txt")
    sys.exit(1)

def setup_logging():
    """Setup logging configuration"""
    log_file = os.path.join(LOGS_DIR, f'manual_tts_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    
    logging.basicConfig(
        level=logging.INFO,
        format=LOG_FORMAT,
        datefmt=LOG_DATE_FORMAT,
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    return log_file

def show_help():
    """Show help information"""
    print(f"\n{Fore.MAGENTA}üìã H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:{Style.RESET_ALL}")
    print(f"  üìù Nh·∫≠p vƒÉn b·∫£n ƒë·ªÉ chuy·ªÉn th√†nh gi·ªçng n√≥i")
    print(f"  üîÑ Nh·∫•n Enter 2 l·∫ßn ƒë·ªÉ k·∫øt th√∫c nh·∫≠p text")
    print(f"  üì± H·ªó tr·ª£ vƒÉn b·∫£n nhi·ªÅu d√≤ng")
    print(f"\n{Fore.CYAN}üéõÔ∏è C√ÅC L·ªÜNH:{Style.RESET_ALL}")
    print(f"  quit/exit/q - Tho√°t ch∆∞∆°ng tr√¨nh")
    print(f"  help - Hi·ªÉn th·ªã tr·ª£ gi√∫p")
    print(f"  voices - Xem danh s√°ch gi·ªçng n√≥i")
    print(f"  clear - X√≥a m√†n h√¨nh")
    print(f"  stats - Xem th·ªëng k√™")
    print(f"  settings - Xem c√†i ƒë·∫∑t hi·ªán t·∫°i")
    print(f"\n{Fore.GREEN}üí° TIPS:{Style.RESET_ALL}")
    print(f"  ‚Ä¢ VƒÉn b·∫£n d√†i (>500 k√Ω t·ª±) s·∫Ω c·∫ßn x√°c nh·∫≠n")
    print(f"  ‚Ä¢ File audio ƒë∆∞·ª£c l∆∞u trong {AUDIO_OUTPUT_DIR}")
    print(f"  ‚Ä¢ H·ªó tr·ª£ d·∫•u c√¢u v√† k√Ω t·ª± ƒë·∫∑c bi·ªát")

def show_voices(tts_service):
    """Show available voices"""
    print(f"\n{Fore.MAGENTA}üé§ DANH S√ÅCH GI·ªåNG N√ìI:{Style.RESET_ALL}")
    try:
        voices = tts_service.get_available_voices()
        print(f"üìä T·ªïng c·ªông: {len(voices)} gi·ªçng n√≥i")
        print("-" * 60)
        for voice_id, voice_name in voices.items():
            current = f"{Fore.GREEN}‚úÖ ƒêANG D√ôNG{Style.RESET_ALL}" if voice_id == AZURE_TTS_VOICE else ""
            print(f"  {voice_id}: {voice_name} {current}")
    except Exception as e:
        print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i danh s√°ch gi·ªçng n√≥i: {e}")

def show_stats(conversion_count, total_chars, total_duration):
    """Show conversion statistics"""
    print(f"\n{Fore.MAGENTA}üìä TH·ªêNG K√ä CHUY·ªÇN ƒê·ªîI:{Style.RESET_ALL}")
    print("-" * 40)
    print(f"  üî¢ S·ªë l·∫ßn chuy·ªÉn ƒë·ªïi: {conversion_count}")
    print(f"  üìù T·ªïng k√Ω t·ª±: {total_chars:,}")
    print(f"  ‚è±Ô∏è T·ªïng th·ªùi gian: {total_duration:.2f} gi√¢y")
    print(f"  üìä Trung b√¨nh: {total_chars/conversion_count:.0f} k√Ω t·ª±/l·∫ßn" if conversion_count > 0 else "")
    print(f"  üöÄ T·ªëc ƒë·ªô: {total_chars/total_duration:.0f} k√Ω t·ª±/gi√¢y" if total_duration > 0 else "")

def show_settings():
    """Show current settings"""
    print(f"\n{Fore.MAGENTA}‚öôÔ∏è C√ÄI ƒê·∫∂T HI·ªÜN T·∫†I:{Style.RESET_ALL}")
    print("-" * 40)
    print(f"  üîß Service: Azure Speech Services")
    print(f"  üåç Region: {AZURE_SPEECH_REGION}")
    print(f"  üéôÔ∏è Voice: {AZURE_TTS_VOICE}")
    print(f"  ‚ö° Speech Rate: {AZURE_TTS_SPEECH_RATE}")
    print(f"  üéµ Pitch: {AZURE_TTS_PITCH}")
    print(f"  üîä Volume: {AZURE_TTS_VOLUME}")
    print(f"  üìÅ Output Directory: {AUDIO_OUTPUT_DIR}")

def main():
    """Main manual TTS function"""
    print(f"{Fore.BLUE}{'='*60}")
    print(f"üó£Ô∏è MANUAL TEXT-TO-SPEECH CONVERTER")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    # Setup logging
    log_file = setup_logging()
    logger = logging.getLogger(__name__)
    logger.info("Starting manual TTS converter")
    
    # Check configuration
    if not AZURE_SPEECH_KEY or not AZURE_SPEECH_REGION:
        print(f"\n{Fore.RED}‚ùå CONFIGURATION ERROR{Style.RESET_ALL}")
        print("üìã Please configure Azure Speech Services in .env file:")
        print("   AZURE_SPEECH_KEY=your_azure_speech_key")
        print("   AZURE_SPEECH_REGION=your_azure_region")
        return False
    
    # Initialize services
    try:
        print(f"\n{Fore.CYAN}üîß Initializing TTS service...{Style.RESET_ALL}")
        tts_service = AzureTTSService(
            AZURE_SPEECH_KEY, 
            AZURE_SPEECH_REGION, 
            AZURE_TTS_VOICE,
            AZURE_TTS_SPEECH_RATE,
            AZURE_TTS_PITCH,
            AZURE_TTS_VOLUME
        )
        
        # Test connection
        if not tts_service.test_connection():
            print(f"{Fore.RED}‚ùå Cannot connect to TTS service{Style.RESET_ALL}")
            return False
        
        print(f"{Fore.GREEN}‚úÖ TTS service ready!{Style.RESET_ALL}")
        
        metrics_collector = MetricsCollector()
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Failed to initialize TTS service: {e}{Style.RESET_ALL}")
        return False
    
    # Show initial information
    show_settings()
    show_help()
    
    # Main conversion loop
    conversion_count = 0
    total_chars = 0
    total_duration = 0.0
    
    print(f"\n{Fore.GREEN}üöÄ TTS Converter ƒë√£ s·∫µn s√†ng!{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}üí° G√µ 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt{Style.RESET_ALL}")
    
    try:
        while True:
            print(f"\n{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}üìù Nh·∫≠p vƒÉn b·∫£n (#{conversion_count + 1}):{Style.RESET_ALL}")
            print(f"{Fore.GREEN}üí≠ (Enter 2 l·∫ßn ƒë·ªÉ k·∫øt th√∫c, ho·∫∑c g√µ l·ªánh){Style.RESET_ALL}")
            
            # Multi-line input
            lines = []
            while True:
                try:
                    line = input("üìù ").strip()
                except EOFError:
                    line = "quit"
                
                # Handle commands
                if line.lower() in ['quit', 'exit', 'q']:
                    print(f"{Fore.CYAN}üëã T·∫°m bi·ªát!{Style.RESET_ALL}")
                    if conversion_count > 0:
                        show_stats(conversion_count, total_chars, total_duration)
                        print(f"{Fore.GREEN}üìÅ Logs saved to: {log_file}{Style.RESET_ALL}")
                    return True
                
                elif line.lower() == 'help':
                    show_help()
                    break
                
                elif line.lower() == 'voices':
                    show_voices(tts_service)
                    break
                
                elif line.lower() == 'clear':
                    os.system('cls' if os.name == 'nt' else 'clear')
                    break
                
                elif line.lower() == 'stats':
                    show_stats(conversion_count, total_chars, total_duration)
                    break
                
                elif line.lower() == 'settings':
                    show_settings()
                    break
                
                elif line == "":
                    if lines:  # If we have content, process it
                        break
                    else:
                        print(f"{Fore.YELLOW}‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ho·∫∑c l·ªánh{Style.RESET_ALL}")
                        continue
                else:
                    lines.append(line)
            
            # Skip if it was a command
            if line.lower() in ['help', 'voices', 'clear', 'stats', 'settings']:
                continue
            
            # Join lines to create full text
            user_text = "\n".join(lines).strip()
            
            if not user_text:
                print(f"{Fore.YELLOW}‚ö†Ô∏è Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ chuy·ªÉn ƒë·ªïi{Style.RESET_ALL}")
                continue
            
            # Show text preview
            char_count = len(user_text)
            word_count = len(user_text.split())
            preview_text = user_text[:100] + "..." if char_count > 100 else user_text
            
            print(f"\n{Fore.CYAN}üìÑ Text preview:{Style.RESET_ALL}")
            print(f"   {preview_text}")
            print(f"\n{Fore.CYAN}üìä Text info:{Style.RESET_ALL}")
            print(f"   üìù Characters: {char_count}")
            print(f"   üìñ Words: {word_count}")
            print(f"   ‚è±Ô∏è Estimated duration: ~{char_count * 0.1:.1f} seconds")
            
            # Confirm if text is very long
            if char_count > 500:
                confirm = input(f"\n{Fore.YELLOW}‚ö†Ô∏è Text d√†i ({char_count} k√Ω t·ª±). Ti·∫øp t·ª•c? (y/n): {Style.RESET_ALL}")
                if confirm.lower() not in ['y', 'yes', '']:
                    continue
            
            # Generate output filename
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = os.path.join(AUDIO_OUTPUT_DIR, f"manual_tts_{timestamp}.wav")
            
            # Convert text to speech
            print(f"\n{Fore.CYAN}üîÑ ƒêang chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i...{Style.RESET_ALL}")
            start_time = metrics_collector.start_timer()
            audio_path, metadata, success = tts_service.text_to_speech(user_text, output_file)
            end_time, response_time = metrics_collector.end_timer(start_time)
            
            if success:
                conversion_count += 1
                total_chars += char_count
                total_duration += response_time
                
                # Create and display metrics
                tts_metrics = metrics_collector.create_tts_metrics(
                    start_time=start_time,
                    end_time=end_time,
                    response_time=response_time,
                    audio_duration=metadata.get('duration', 0.0),
                    character_count=char_count,
                    voice_model=AZURE_TTS_VOICE,
                    audio_format="wav",
                    file_size=metadata.get('file_size', 0),
                    success=True
                )
                
                print(f"\n{Fore.GREEN}‚úÖ CHUY·ªÇN ƒê·ªîI TH√ÄNH C√îNG!{Style.RESET_ALL}")
                metrics_collector.display_metrics(tts_metrics, f"Conversion #{conversion_count}")
                metrics_collector.save_metrics(tts_metrics)
                
                print(f"{Fore.GREEN}üìÅ File saved: {audio_path}{Style.RESET_ALL}")
                
                # Ask if user wants to play audio
                play_choice = input(f"\n{Fore.YELLOW}üéµ Ph√°t √¢m thanh ngay? (y/n/Enter=yes): {Style.RESET_ALL}")
                if play_choice.lower() in ['y', 'yes', '']:
                    print(f"{Fore.GREEN}üéµ ƒêang ph√°t √¢m thanh...{Style.RESET_ALL}")
                    try:
                        tts_service.play_audio_file(audio_path)
                    except Exception as e:
                        print(f"{Fore.YELLOW}‚ö†Ô∏è Kh√¥ng th·ªÉ ph√°t √¢m thanh: {e}{Style.RESET_ALL}")
                        print(f"üìÅ B·∫°n c√≥ th·ªÉ m·ªü file: {audio_path}")
                
            else:
                print(f"{Fore.RED}‚ùå Chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.{Style.RESET_ALL}")
                print(f"üí° Ki·ªÉm tra k·∫øt n·ªëi internet v√† API key")
    
    except KeyboardInterrupt:
        print(f"\n\n{Fore.YELLOW}‚ö†Ô∏è Ch∆∞∆°ng tr√¨nh b·ªã ng·∫Øt b·ªüi ng∆∞·ªùi d√πng{Style.RESET_ALL}")
        if conversion_count > 0:
            show_stats(conversion_count, total_chars, total_duration)
            print(f"{Fore.GREEN}üìÅ Logs saved to: {log_file}{Style.RESET_ALL}")
        return True
    
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå L·ªói kh√¥ng mong mu·ªën: {e}{Style.RESET_ALL}")
        logger.error(f"Unexpected error: {e}")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå Critical error: {e}{Style.RESET_ALL}")
        sys.exit(1)
