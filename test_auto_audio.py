"""
Auto Audio Playback Demo - Test t√≠nh nƒÉng ph√°t √¢m thanh t·ª± ƒë·ªông
Ch·∫°y: python test_auto_audio.py
"""

import os
import sys
import time
from datetime import datetime
from colorama import init, Fore, Style

# Initialize colorama for Windows
init()

# Add utils to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))

try:
    from config import *
    from utils.azure_tts_service import AzureTTSService
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üìã Make sure to install required packages: pip install -r requirements.txt")
    sys.exit(1)

def test_multiple_audio_playback():
    """Test multiple audio files with auto playback"""
    print(f"{Fore.BLUE}{'='*60}")
    print(f"üéµ AUTO AUDIO PLAYBACK DEMO")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    # Sample texts for testing
    test_samples = [
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa b·∫°n.",
        "H√¥m nay b·∫°n c√≥ kh·ªèe kh√¥ng?",
        "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe.",
        "B·∫°n c·∫ßn t√¥i h·ªó tr·ª£ g√¨ th√™m kh√¥ng?",
        "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!"
    ]
    
    try:
        # Initialize TTS service
        print(f"{Fore.CYAN}üîß Initializing TTS service...{Style.RESET_ALL}")
        tts_service = AzureTTSService(
            AZURE_SPEECH_KEY, 
            AZURE_SPEECH_REGION, 
            AZURE_TTS_VOICE,
            AZURE_TTS_SPEECH_RATE,
            AZURE_TTS_PITCH,
            AZURE_TTS_VOLUME
        )
        
        if not tts_service.test_connection():
            print(f"{Fore.RED}‚ùå TTS service connection failed{Style.RESET_ALL}")
            return False
        
        print(f"{Fore.GREEN}‚úÖ TTS service ready{Style.RESET_ALL}")
        
        # Test each sample
        for i, text in enumerate(test_samples, 1):
            print(f"\n{Fore.YELLOW}{'='*50}")
            print(f"üéµ Audio Test {i}/{len(test_samples)}")
            print(f"{'='*50}{Style.RESET_ALL}")
            
            print(f"üìù Text: '{text}'")
            
            # Generate audio
            timestamp = datetime.now().strftime("%H%M%S")
            output_file = os.path.join(AUDIO_OUTPUT_DIR, f"auto_test_{i}_{timestamp}.wav")
            
            print(f"{Fore.CYAN}üîÑ Generating audio...{Style.RESET_ALL}")
            start_time = time.time()
            
            audio_path, metadata, success = tts_service.text_to_speech(text, output_file)
            generation_time = time.time() - start_time
            
            if not success:
                print(f"{Fore.RED}‚ùå Audio generation failed{Style.RESET_ALL}")
                continue
            
            print(f"{Fore.GREEN}‚úÖ Audio generated in {generation_time:.2f}s{Style.RESET_ALL}")
            print(f"üìÅ File: {audio_path}")
            print(f"üìè Duration: {metadata.get('duration', 0):.1f}s")
            
            # Auto play with enhanced error handling
            print(f"\n{Fore.MAGENTA}üéµ AUTO PLAYING...{Style.RESET_ALL}")
            
            playback_success = auto_play_audio(audio_path, tts_service)
            
            if playback_success:
                print(f"{Fore.GREEN}‚úÖ Playback completed successfully!{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}‚ö†Ô∏è Playback had issues{Style.RESET_ALL}")
            
            # Wait between tests
            if i < len(test_samples):
                print(f"\n{Fore.CYAN}‚è∏Ô∏è Waiting 2 seconds before next test...{Style.RESET_ALL}")
                time.sleep(2)
        
        print(f"\n{Fore.BLUE}{'='*60}")
        print(f"üìä AUTO AUDIO DEMO COMPLETED")
        print(f"{'='*60}{Style.RESET_ALL}")
        
        print(f"‚úÖ Tested {len(test_samples)} audio samples")
        print(f"üìÅ Audio files saved to: {AUDIO_OUTPUT_DIR}")
        
        return True
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Demo failed: {e}{Style.RESET_ALL}")
        return False

def auto_play_audio(audio_path, tts_service):
    """Enhanced auto play function with multiple fallback methods"""
    try:
        # Method 1: Use TTS service play method
        tts_service.play_audio_file(audio_path)
        return True
        
    except Exception as primary_error:
        print(f"{Fore.YELLOW}‚ö†Ô∏è Primary playback failed: {primary_error}{Style.RESET_ALL}")
        
        # Method 2: Try system-specific commands
        import subprocess
        import platform
        
        system = platform.system().lower()
        
        try:
            if system == 'windows':
                # Windows PowerShell method
                print(f"{Fore.CYAN}üîÑ Trying Windows PowerShell playback...{Style.RESET_ALL}")
                subprocess.run([
                    'powershell', '-c', 
                    f'(New-Object Media.SoundPlayer "{audio_path}").PlaySync()'
                ], check=True, capture_output=True, timeout=30)
                
            elif system == 'darwin':  # macOS
                print(f"{Fore.CYAN}üîÑ Trying macOS afplay...{Style.RESET_ALL}")
                subprocess.run(['afplay', audio_path], check=True, timeout=30)
                
            elif system == 'linux':
                print(f"{Fore.CYAN}üîÑ Trying Linux aplay...{Style.RESET_ALL}")
                subprocess.run(['aplay', audio_path], check=True, timeout=30)
            
            return True
            
        except subprocess.TimeoutExpired:
            print(f"{Fore.GREEN}‚úÖ Audio is playing (timeout reached)...{Style.RESET_ALL}")
            return True
            
        except Exception as subprocess_error:
            print(f"{Fore.YELLOW}‚ö†Ô∏è Subprocess playback failed: {subprocess_error}{Style.RESET_ALL}")
            
            # Method 3: Try to open with default application
            try:
                print(f"{Fore.CYAN}üîÑ Trying system default player...{Style.RESET_ALL}")
                
                if system == 'windows':
                    os.startfile(audio_path)
                else:
                    subprocess.run(['open' if system == 'darwin' else 'xdg-open', audio_path])
                
                print(f"{Fore.GREEN}‚úÖ Opened with system default player{Style.RESET_ALL}")
                return True
                
            except Exception as final_error:
                print(f"{Fore.RED}‚ùå All playback methods failed: {final_error}{Style.RESET_ALL}")
                print(f"üìÅ Audio saved to: {audio_path}")
                return False

def interactive_audio_test():
    """Interactive audio test where user can input custom text"""
    print(f"\n{Fore.BLUE}{'='*60}")
    print(f"üé§ INTERACTIVE AUDIO TEST")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    print(f"{Fore.YELLOW}Nh·∫≠p text ƒë·ªÉ chuy·ªÉn th√†nh gi·ªçng n√≥i v√† t·ª± ƒë·ªông ph√°t.{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}G√µ 'quit' ƒë·ªÉ tho√°t.{Style.RESET_ALL}")
    
    try:
        # Initialize TTS service
        tts_service = AzureTTSService(
            AZURE_SPEECH_KEY, 
            AZURE_SPEECH_REGION, 
            AZURE_TTS_VOICE,
            AZURE_TTS_SPEECH_RATE,
            AZURE_TTS_PITCH,
            AZURE_TTS_VOLUME
        )
        
        if not tts_service.test_connection():
            print(f"{Fore.RED}‚ùå TTS service connection failed{Style.RESET_ALL}")
            return False
        
        audio_count = 0
        
        while True:
            user_text = input(f"\n{Fore.CYAN}üí¨ Nh·∫≠p text: {Style.RESET_ALL}").strip()
            
            if user_text.lower() in ['quit', 'exit', 'tho√°t', 'q']:
                print(f"{Fore.CYAN}üëã Goodbye!{Style.RESET_ALL}")
                break
            
            if not user_text:
                print(f"{Fore.YELLOW}‚ö†Ô∏è Vui l√≤ng nh·∫≠p text{Style.RESET_ALL}")
                continue
            
            audio_count += 1
            
            # Generate and play audio
            timestamp = datetime.now().strftime("%H%M%S")
            output_file = os.path.join(AUDIO_OUTPUT_DIR, f"interactive_{audio_count}_{timestamp}.wav")
            
            print(f"\n{Fore.CYAN}üîÑ ƒêang t·∫°o √¢m thanh...{Style.RESET_ALL}")
            audio_path, metadata, success = tts_service.text_to_speech(user_text, output_file)
            
            if success:
                print(f"{Fore.GREEN}‚úÖ √Çm thanh ƒë√£ t·∫°o{Style.RESET_ALL}")
                print(f"üìÅ File: {audio_path}")
                
                print(f"\n{Fore.MAGENTA}üéµ ƒêang ph√°t √¢m thanh...{Style.RESET_ALL}")
                playback_success = auto_play_audio(audio_path, tts_service)
                
                if not playback_success:
                    print(f"{Fore.YELLOW}üí° B·∫°n c√≥ th·ªÉ m·ªü file th·ªß c√¥ng: {audio_path}{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}‚ùå Kh√¥ng th·ªÉ t·∫°o √¢m thanh{Style.RESET_ALL}")
        
        print(f"\n{Fore.GREEN}üìä ƒê√£ t·∫°o {audio_count} file √¢m thanh{Style.RESET_ALL}")
        return True
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Interactive test failed: {e}{Style.RESET_ALL}")
        return False

def main():
    """Main function"""
    print(f"{Fore.BLUE}{'='*70}")
    print(f"üéµ AUTO AUDIO PLAYBACK TESTING SUITE")
    print(f"{'='*70}{Style.RESET_ALL}")
    
    # Check configuration
    if not AZURE_SPEECH_KEY or not AZURE_SPEECH_REGION:
        print(f"\n{Fore.RED}‚ùå CONFIGURATION ERROR{Style.RESET_ALL}")
        print("üìã Missing Azure Speech Services configuration")
        print("üí° Please check your .env file")
        return False
    
    print(f"\n{Fore.CYAN}üéØ SELECT TEST MODE:{Style.RESET_ALL}")
    print(f"1. üéµ Multiple Audio Samples Test")
    print(f"2. üé§ Interactive Audio Test")
    print(f"3. üöÄ Run Both Tests")
    
    choice = input(f"\n{Fore.CYAN}üëâ Enter choice (1-3): {Style.RESET_ALL}").strip()
    
    if choice == "1":
        print(f"\n{Fore.YELLOW}üéµ Starting Multiple Audio Test...{Style.RESET_ALL}")
        return test_multiple_audio_playback()
        
    elif choice == "2":
        print(f"\n{Fore.YELLOW}üé§ Starting Interactive Audio Test...{Style.RESET_ALL}")
        return interactive_audio_test()
        
    elif choice == "3":
        print(f"\n{Fore.YELLOW}üöÄ Running All Tests...{Style.RESET_ALL}")
        test1 = test_multiple_audio_playback()
        if test1:
            print(f"\n{Fore.GREEN}‚úÖ Multiple audio test completed{Style.RESET_ALL}")
        
        test2 = interactive_audio_test()
        if test2:
            print(f"\n{Fore.GREEN}‚úÖ Interactive test completed{Style.RESET_ALL}")
        
        return test1 and test2
        
    else:
        print(f"{Fore.RED}‚ùå Invalid choice{Style.RESET_ALL}")
        return False

if __name__ == "__main__":
    try:
        success = main()
        
        if success:
            print(f"\n{Fore.GREEN}üéâ Auto audio playback testing completed successfully!{Style.RESET_ALL}")
            print(f"üí° Your pipeline is ready for auto audio playback!")
        else:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è Audio playback testing had issues{Style.RESET_ALL}")
            print(f"üí° Check your audio system and try again")
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è Test interrupted by user{Style.RESET_ALL}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå Unexpected error: {e}{Style.RESET_ALL}")
        sys.exit(1)
