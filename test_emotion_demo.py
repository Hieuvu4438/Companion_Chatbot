"""
Emotion Detection Demo - Ki·ªÉm tra kh·∫£ nƒÉng nh·∫≠n di·ªán c·∫£m x√∫c v√† t·ªëi ∆∞u ph·∫£n h·ªìi
Ch·∫°y: python test_emotion_demo.py
"""

import os
import sys
from colorama import init, Fore, Style

# Initialize colorama for Windows
init()

# Add utils to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))

try:
    from config import *
    from utils.llm_service import LLMService
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üìã Make sure to install required packages: pip install -r requirements.txt")
    sys.exit(1)

def display_emotion_result(text, emotion_result):
    """Display emotion detection result in a formatted way"""
    print(f"\n{Fore.WHITE}üìù Input: '{text}'{Style.RESET_ALL}")
    
    if emotion_result['has_emotion']:
        primary = emotion_result['primary_emotion']
        confidence = emotion_result['confidence_scores'].get(primary, 0)
        context = emotion_result['emotion_context']
        all_emotions = emotion_result['detected_emotions']
        
        print(f"üé≠ Primary emotion: {Fore.YELLOW}{primary}{Style.RESET_ALL}")
        print(f"üìä Confidence: {Fore.GREEN}{confidence:.2f}{Style.RESET_ALL}")
        print(f"üí° Context: {context}")
        
        if len(all_emotions) > 1:
            print(f"üìã All detected: {', '.join(all_emotions)}")
            
        # Show confidence scores for all detected emotions
        if len(emotion_result['confidence_scores']) > 1:
            print(f"üìà Confidence scores:")
            for emotion, score in emotion_result['confidence_scores'].items():
                print(f"   - {emotion}: {score:.2f}")
    else:
        print(f"üòê No specific emotion detected")

def test_predefined_samples():
    """Test emotion detection with predefined samples"""
    print(f"\n{Fore.BLUE}{'='*60}")
    print(f"üß™ TESTING PREDEFINED EMOTION SAMPLES")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    # Initialize LLM service
    llm_service = LLMService(GEMINI_API_KEY, GEMINI_MODEL, GEMINI_TEMPERATURE, GEMINI_MAX_TOKENS)
    
    # Test samples categorized by emotion
    test_samples = {
        "Bu·ªìn & C√¥ ƒë∆°n": [
            "T√¥i c·∫£m th·∫•y bu·ªìn v√† c√¥ ƒë∆°n qu√°",
            "H√¥m nay t√¥i kh√≥c v√¨ nh·ªõ ch·ªìng ƒë√£ m·∫•t",
            "T√¥i th·∫•y t·ªßi th√¢n, kh√¥ng ai hi·ªÉu t√¥i"
        ],
        "Nh·ªõ qu√™": [
            "T√¥i nh·ªõ qu√™ h∆∞∆°ng l·∫Øm",
            "Xa nh√† n√†y, t√¥i nh·ªõ c·ªë h∆∞∆°ng gh√™",
            "Nh·ªõ qu√™ nh√† v√† nh·ªØng ng√†y x∆∞a"
        ],
        "Lo l·∫Øng": [
            "T√¥i lo l·∫Øng v·ªÅ t∆∞∆°ng lai c·ªßa con ch√°u",
            "S·ª©c kh·ªèe y·∫øu, t√¥i s·ª£ b·ªã b·ªánh n·∫∑ng",
            "T√¥i h·ªìi h·ªôp kh√¥ng bi·∫øt k·∫øt qu·∫£ kh√°m b·ªánh ra sao"
        ],
        "Vui v·∫ª": [
            "H√¥m nay t√¥i r·∫•t vui v√¨ ƒë∆∞·ª£c g·∫∑p ch√°u",
            "T√¥i m·ª´ng l·∫Øm khi nghe tin con trai thƒÉng ch·ª©c",
            "C·∫£m th·∫•y ph·∫•n kh·ªüi v√¨ s·ª©c kh·ªèe ƒë·ª° h∆°n"
        ],
        "B·ªánh t·∫≠t": [
            "ƒê·∫ßu t√¥i ƒëau v√† c·∫£m th·∫•y ch√≥ng m·∫∑t",
            "G·∫ßn ƒë√¢y t√¥i hay m·ªát m·ªèi v√† kh√¥ng kh·ªèe",
            "B·ªánh tim c·ªßa t√¥i t√°i ph√°t, t√¥i lo l·∫Øm"
        ],
        "Gia ƒë√¨nh": [
            "Con ch√°u t√¥i r·∫•t hi·∫øu th·∫£o",
            "Gia ƒë√¨nh t√¥i sum v·∫ßy trong d·ªãp T·∫øt",
            "Ch√°u n·ªôi v·ª´a sinh, t√¥i l√†m b√† c·ªë r·ªìi"
        ]
    }
    
    for category, samples in test_samples.items():
        print(f"\n{Fore.CYAN}üìÇ Category: {category}{Style.RESET_ALL}")
        print("-" * 50)
        
        for i, sample in enumerate(samples, 1):
            emotion_result = llm_service.detect_emotion(sample)
            print(f"\n{Fore.MAGENTA}Sample {i}:{Style.RESET_ALL}")
            display_emotion_result(sample, emotion_result)

def test_mixed_emotions():
    """Test samples with mixed or complex emotions"""
    print(f"\n{Fore.BLUE}{'='*60}")
    print(f"üåà TESTING MIXED/COMPLEX EMOTIONS")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    llm_service = LLMService(GEMINI_API_KEY, GEMINI_MODEL, GEMINI_TEMPERATURE, GEMINI_MAX_TOKENS)
    
    mixed_samples = [
        "T√¥i vui v√¨ con ch√°u thƒÉm nh∆∞ng c≈©ng bu·ªìn v√¨ h·ªç ph·∫£i ƒëi",
        "Nh·ªõ qu√™ l·∫Øm nh∆∞ng ·ªü ƒë√¢y con ch√°u chƒÉm s√≥c t·ªët",
        "Lo l·∫Øng v·ªÅ b·ªánh t·∫≠t nh∆∞ng gia ƒë√¨nh lu√¥n b√™n c·∫°nh",
        "ƒêau ·ªëm nh∆∞ng t√¥i v·∫´n c·ªë g·∫Øng vui v·∫ª",
        "H·∫°nh ph√∫c ƒë∆∞·ª£c l√†m b√† nh∆∞ng s·ª£ kh√¥ng bi·∫øt chƒÉm ch√°u"
    ]
    
    for i, sample in enumerate(mixed_samples, 1):
        emotion_result = llm_service.detect_emotion(sample)
        print(f"\n{Fore.MAGENTA}Mixed Sample {i}:{Style.RESET_ALL}")
        display_emotion_result(sample, emotion_result)

def test_response_optimization():
    """Test emotion-optimized responses"""
    print(f"\n{Fore.BLUE}{'='*60}")
    print(f"ü§ñ TESTING EMOTION-OPTIMIZED RESPONSES")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    llm_service = LLMService(GEMINI_API_KEY, GEMINI_MODEL, GEMINI_TEMPERATURE, GEMINI_MAX_TOKENS)
    
    test_inputs = [
        "T√¥i bu·ªìn v√¨ c√¥ ƒë∆°n qu√°",
        "Lo l·∫Øng v·ªÅ s·ª©c kh·ªèe c·ªßa m√¨nh",
        "H√¥m nay con ch√°u v·ªÅ thƒÉm, t√¥i vui l·∫Øm",
        "ƒê·∫ßu t√¥i ƒëau, kh√¥ng bi·∫øt c√≥ sao kh√¥ng",
        "Nh·ªõ qu√™ nh√† v√† nh·ªØng ng∆∞·ªùi th√¢n"
    ]
    
    for i, user_input in enumerate(test_inputs, 1):
        print(f"\n{Fore.CYAN}{'='*40}")
        print(f"Test Response {i}")
        print(f"{'='*40}{Style.RESET_ALL}")
        
        # Detect emotion
        emotion_result = llm_service.detect_emotion(user_input)
        display_emotion_result(user_input, emotion_result)
        
        # Get optimized response
        print(f"\n{Fore.YELLOW}ü§ñ Generating emotion-optimized response...{Style.RESET_ALL}")
        
        response, usage_info, success = llm_service.get_emotion_optimized_response(user_input)
        
        if success:
            print(f"\n{Fore.GREEN}‚úÖ Response:{Style.RESET_ALL}")
            print(f"üí¨ '{response}'")
            
            # Show token usage
            tokens = usage_info.get('total_tokens', 'N/A')
            print(f"üìä Tokens used: {tokens}")
            print(f"üìè Response length: {len(response)} characters")
            
        else:
            print(f"\n{Fore.RED}‚ùå Failed to generate response{Style.RESET_ALL}")

def interactive_emotion_test():
    """Interactive emotion detection test"""
    print(f"\n{Fore.BLUE}{'='*60}")
    print(f"üí¨ INTERACTIVE EMOTION TEST")
    print(f"{'='*60}{Style.RESET_ALL}")
    
    print(f"{Fore.YELLOW}Enter your own text to test emotion detection and response generation.")
    print(f"Type 'quit' to exit.{Style.RESET_ALL}")
    
    llm_service = LLMService(GEMINI_API_KEY, GEMINI_MODEL, GEMINI_TEMPERATURE, GEMINI_MAX_TOKENS)
    
    while True:
        user_input = input(f"\n{Fore.CYAN}üëâ Your message: {Style.RESET_ALL}").strip()
        
        if user_input.lower() in ['quit', 'exit', 'q']:
            print(f"{Fore.CYAN}üëã Goodbye!{Style.RESET_ALL}")
            break
            
        if not user_input:
            print(f"{Fore.YELLOW}‚ö†Ô∏è Please enter some text{Style.RESET_ALL}")
            continue
        
        # Detect emotion
        emotion_result = llm_service.detect_emotion(user_input)
        display_emotion_result(user_input, emotion_result)
        
        # Ask if user wants response
        want_response = input(f"\n{Fore.YELLOW}ü§ñ Generate optimized response? (y/n): {Style.RESET_ALL}").strip().lower()
        
        if want_response in ['y', 'yes', 'c√≥']:
            print(f"\n{Fore.YELLOW}Generating response...{Style.RESET_ALL}")
            
            response, usage_info, success = llm_service.get_emotion_optimized_response(user_input)
            
            if success:
                print(f"\n{Fore.GREEN}‚úÖ Response:{Style.RESET_ALL}")
                print(f"üí¨ '{response}'")
                
                tokens = usage_info.get('total_tokens', 'N/A')
                print(f"\nüìä Response stats:")
                print(f"   - Tokens: {tokens}")
                print(f"   - Length: {len(response)} characters")
                print(f"   - Word count: {len(response.split())} words")
            else:
                print(f"\n{Fore.RED}‚ùå Failed to generate response{Style.RESET_ALL}")

def main():
    """Main function"""
    print(f"{Fore.BLUE}{'='*70}")
    print(f"üé≠ EMOTION DETECTION & RESPONSE OPTIMIZATION DEMO")
    print(f"{'='*70}{Style.RESET_ALL}")
    
    # Check configuration
    if not GEMINI_API_KEY:
        print(f"\n{Fore.RED}‚ùå CONFIGURATION ERROR{Style.RESET_ALL}")
        print("üìã Missing GEMINI_API_KEY in configuration")
        print("üí° Please check your .env file")
        return False
    
    print(f"\n{Fore.CYAN}üéØ SELECT TEST MODE:{Style.RESET_ALL}")
    print(f"1. Test Predefined Emotion Samples")
    print(f"2. Test Mixed/Complex Emotions")
    print(f"3. Test Response Optimization")
    print(f"4. Interactive Emotion Test")
    print(f"5. Run All Tests")
    
    while True:
        choice = input(f"\n{Fore.CYAN}üëâ Enter choice (1-5): {Style.RESET_ALL}").strip()
        
        if choice == "1":
            test_predefined_samples()
            break
        elif choice == "2":
            test_mixed_emotions()
            break
        elif choice == "3":
            test_response_optimization()
            break
        elif choice == "4":
            interactive_emotion_test()
            break
        elif choice == "5":
            test_predefined_samples()
            test_mixed_emotions()
            test_response_optimization()
            print(f"\n{Fore.GREEN}‚úÖ All automated tests completed!{Style.RESET_ALL}")
            
            want_interactive = input(f"\n{Fore.YELLOW}ü§î Run interactive test too? (y/n): {Style.RESET_ALL}").strip().lower()
            if want_interactive in ['y', 'yes', 'c√≥']:
                interactive_emotion_test()
            break
        else:
            print(f"{Fore.RED}‚ùå Invalid choice. Please enter 1-5.{Style.RESET_ALL}")
    
    print(f"\n{Fore.BLUE}{'='*70}")
    print(f"üìä EMOTION DEMO COMPLETED")
    print(f"{'='*70}{Style.RESET_ALL}")
    
    print(f"\n{Fore.GREEN}üéâ Demo finished successfully!{Style.RESET_ALL}")
    print(f"üí° Key features demonstrated:")
    print(f"   - Emotion keyword detection")
    print(f"   - Context-aware response generation")
    print(f"   - Optimized prompt engineering")
    print(f"   - Shortened response length")
    print(f"   - Elder-friendly communication style")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è Demo interrupted by user{Style.RESET_ALL}")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå Unexpected error: {e}{Style.RESET_ALL}")
        sys.exit(1)
