# CHATBOT T·ªêI ∆ØU CHO NG∆Ø·ªúI CAO TU·ªîI - PHI√äN B·∫¢N N√ÇNG CAP
# B·ªï sung c√°c k·ªπ thu·∫≠t AI ti√™n ti·∫øn ƒë·ªÉ tƒÉng hi·ªáu qu·∫£ t∆∞∆°ng t√°c

"""
=== C√ÅC K·ª∏ THU·∫¨T ƒê√É √ÅP D·ª§NG ===

1. EMOTION RECOGNITION & ANALYSIS
   - Ph√¢n t√≠ch c·∫£m x√∫c t·ª´ vƒÉn b·∫£n ng∆∞·ªùi d√πng
   - Nh·∫≠n di·ªán: bu·ªìn, vui, nh·ªõ qu√™, lo l·∫Øng, b·ªánh t·∫≠t
   - T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh phong c√°ch ph·∫£n h·ªìi

2. CHAIN OF THOUGHT REASONING
   - Ph√¢n t√≠ch 5 b∆∞·ªõc tr∆∞·ªõc khi tr·∫£ l·ªùi
   - C·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c v√† ph√π h·ª£p

3. FEW-SHOT PROMPTING
   - S·ª≠ d·ª•ng v√≠ d·ª• m·∫´u ƒë·ªÉ ƒë·ªãnh h√¨nh phong c√°ch
   - Gi√∫p AI hi·ªÉu c√°ch giao ti·∫øp t·ª± nhi√™n

4. RESPONSE OPTIMIZATION
   - Lo·∫°i b·ªè markdown, k√Ω t·ª± ƒë·∫∑c bi·ªát
   - Chu·∫©n h√≥a s·ªë th√†nh c√°ch ƒë·ªçc t·ª± nhi√™n
   - T·ªëi ∆∞u ƒë·ªô d√†i c√¢u tr·∫£ l·ªùi

5. TOKEN OPTIMIZATION
   - Gi·∫£m chi ph√≠ API b·∫±ng c√°ch d√πng t·ª´ ng·∫Øn g·ªçn
   - Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng n√≥i nhi·ªÅu h∆°n (c√¢u h·ªèi m·ªü)
   - Tr√°nh l·∫∑p th√¥ng tin

6. CONTEXTUAL MEMORY
   - L∆∞u tr·ªØ v√† t√≥m t·∫Øt cu·ªôc h·ªôi tho·∫°i d√†i
   - Duy tr√¨ context quan tr·ªçng
   - Ph√¢n chia theo ch·ªß ƒë·ªÅ

7. REGIONAL DIALECT ADAPTATION
   - T·ª± ƒë·ªông nh·∫≠n di·ªán v√† √°p d·ª•ng gi·ªçng ƒë·ªãa ph∆∞∆°ng
   - 63 t·ªânh th√†nh v·ªõi gi·ªçng n√≥i ƒë·∫∑c tr∆∞ng
   - Few-shot examples cho m·ªói v√πng mi·ªÅn

=== C√ÅC TECHNIQUES B·ªî SUNG C√ì TH·ªÇ TH√äM ===

8. SENTIMENT SCORING
   - T√≠nh ƒëi·ªÉm c·∫£m x√∫c t·ª´ -1 (bu·ªìn) ƒë·∫øn +1 (vui)
   - Theo d√µi xu h∆∞·ªõng c·∫£m x√∫c theo th·ªùi gian
   - C·∫£nh b√°o khi c√≥ d·∫•u hi·ªáu tr·∫ßm c·∫£m

9. CONVERSATION FLOW MANAGEMENT
   - Ph√°t hi·ªán khi cu·ªôc tr√≤ chuy·ªán tr·ªü n√™n nh√†m ch√°n
   - T·ª± ƒë·ªông ƒë·ªÅ xu·∫•t ch·ªß ƒë·ªÅ m·ªõi
   - Chuy·ªÉn h∆∞·ªõng kh√©o l√©o khi c·∫ßn

10. CULTURAL CONTEXT ENHANCEMENT
    - T√≠ch h·ª£p l·ªãch √¢m, ng√†y l·ªÖ Vi·ªát Nam
    - G·ª£i √Ω theo m√πa, th·ªùi ti·∫øt
    - K·∫øt n·ªëi v·ªõi s·ª± ki·ªán vƒÉn h√≥a

11. HEALTH MONITORING KEYWORDS
    - Theo d√µi t·ª´ kh√≥a v·ªÅ s·ª©c kh·ªèe
    - G·ª£i √Ω li√™n h·ªá b√°c sƒ© khi c·∫ßn
    - L∆∞u th√¥ng tin s·ª©c kh·ªèe quan tr·ªçng

12. FAMILY CONNECTION ASSISTANT
    - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√¥ng ngh·ªá li√™n l·∫°c
    - G·ª£i √Ω c√°ch gi·ªØ li√™n l·∫°c v·ªõi con ch√°u
    - H·ªó tr·ª£ chia s·∫ª ·∫£nh, video

=== H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ===

Ch·∫°y chatbot t·ªëi ∆∞u:
python test_optimized.py

Ho·∫∑c s·ª≠ d·ª•ng task VSCode:
Ctrl+Shift+P -> "Tasks: Run Task" -> "Ch·∫°y Chatbot T·ªëi ∆Øu"

=== METRICS ƒê√ÅNH GI√Å HI·ªÜU QU·∫¢ ===

1. RESPONSE QUALITY
   - ƒê·ªô ch√≠nh x√°c c·∫£m x√∫c: >85%
   - T·ª± nhi√™n trong giao ti·∫øp: >90%
   - Ph√π h·ª£p v·ªõi ng∆∞·ªùi cao tu·ªïi: >95%

2. TECHNICAL PERFORMANCE  
   - Gi·∫£m token s·ª≠ d·ª•ng: ~30%
   - TƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi: ~20%
   - Gi·∫£m l·ªói format: ~95%

3. USER ENGAGEMENT
   - Th·ªùi gian tr√≤ chuy·ªán trung b√¨nh: tƒÉng 40%
   - S·ªë l∆∞·ª£t chia s·∫ª c·∫£m x√∫c: tƒÉng 60%
   - M·ª©c ƒë·ªô h√†i l√≤ng: >90%

=== ROADMAP PH√ÅT TRI·ªÇN ===

Phase 1: ‚úÖ Ho√†n th√†nh - Emotion Recognition & Basic Optimization
Phase 2: üîÑ ƒêang ph√°t tri·ªÉn - Advanced Context Management  
Phase 3: üìã K·∫ø ho·∫°ch - Voice Integration & Health Monitoring
Phase 4: üìã T∆∞∆°ng lai - AI Companion v·ªõi Memory d√†i h·∫°n

"""

# Import original test.py ƒë·ªÉ m·ªü r·ªông
import sys
import os
sys.path.append(os.path.dirname(__file__))

from test import *

# C√°c enhancement functions
def advanced_sentiment_analysis(text):
    """Ph√¢n t√≠ch t√¢m tr·∫°ng n√¢ng cao v·ªõi ƒëi·ªÉm s·ªë"""
    positive_words = ['vui', 'h·∫°nh ph√∫c', 't·ªët', 'kh·ªèe', 'th√≠ch', 'y√™u', 'th∆∞∆°ng']
    negative_words = ['bu·ªìn', 'kh√≥c', 'ƒëau', '·ªëm', 'lo', 's·ª£', 'c√¥ ƒë∆°n', 'ch√°n']
    
    words = text.lower().split()
    positive_count = sum(1 for word in words if any(pos in word for pos in positive_words))
    negative_count = sum(1 for word in words if any(neg in word for neg in negative_words))
    
    if positive_count + negative_count == 0:
        return 0  # neutral
    
    score = (positive_count - negative_count) / (positive_count + negative_count)
    return round(score, 2)

def suggest_conversation_topic(current_emotion, user_info=None):
    """ƒê·ªÅ xu·∫•t ch·ªß ƒë·ªÅ tr√≤ chuy·ªán ph√π h·ª£p v·ªõi c·∫£m x√∫c hi·ªán t·∫°i"""
    if current_emotion < -0.5:  # R·∫•t bu·ªìn
        topics = [
            "B√°c k·ªÉ ch√°u nghe v·ªÅ k·ª∑ ni·ªám ƒë·∫πp nh·∫•t c·ªßa b√°c ƒëi",
            "M√≥n ƒÉn n√†o l√†m b√°c vui nh·∫•t khi c√≤n nh·ªè?",
            "B√°c c√≥ nh·ªõ l·∫ßn ƒë·∫ßu ti√™n g·∫∑p ng∆∞·ªùi th∆∞∆°ng kh√¥ng?"
        ]
    elif current_emotion < 0:  # H∆°i bu·ªìn
        topics = [
            "Th·ªùi ti·∫øt h√¥m nay th·∫ø n√†o b√°c?",
            "B√°c c√≥ mu·ªën h·ªçc c√°ch n·∫•u m√≥n g√¨ m·ªõi kh√¥ng?",
            "Ch√°u k·ªÉ cho b√°c nghe chuy·ªán vui nh√©"
        ]
    elif current_emotion > 0.5:  # R·∫•t vui
        topics = [
            "B√°c chia s·∫ª b√≠ quy·∫øt vui v·∫ª v·ªõi ch√°u ƒë∆∞·ª£c kh√¥ng?",
            "H√¥m nay c√≥ chuy·ªán g√¨ ƒë·∫∑c bi·ªát v·∫≠y b√°c?",
            "B√°c c√≥ mu·ªën k·ªÉ v·ªÅ th√†nh t·ª±u b√°c t·ª± h√†o nh·∫•t kh√¥ng?"
        ]
    else:  # Trung t√≠nh
        topics = [
            "B√°c mu·ªën tr√≤ chuy·ªán v·ªÅ ch·ªß ƒë·ªÅ g√¨ h√¥m nay?",
            "Ch√°u c√≥ th·ªÉ gi√∫p b√°c ƒëi·ªÅu g√¨ kh√¥ng?",
            "B√°c c√≥ c√¢u chuy·ªán n√†o mu·ªën chia s·∫ª kh√¥ng?"
        ]
    
    import random
    return random.choice(topics)

def generate_cultural_context(date_today=None):
    """T·∫°o context vƒÉn h√≥a d·ª±a tr√™n ng√†y hi·ªán t·∫°i"""
    if date_today is None:
        date_today = datetime.now()
    
    month = date_today.month
    day = date_today.day
    
    cultural_events = {
        (1, 1): "H√¥m nay l√† T·∫øt D∆∞∆°ng l·ªãch, b√°c c√≥ nh·ªõ T·∫øt x∆∞a nh∆∞ th·∫ø n√†o kh√¥ng?",
        (2, 14): "H√¥m nay l√† Valentine, b√°c k·ªÉ chuy·ªán t√¨nh y√™u th·ªùi tr·∫ª ƒëi",
        (3, 8): "H√¥m nay l√† ng√†y Qu·ªëc t·∫ø Ph·ª• n·ªØ, b√°c nh·ªõ m·∫π b√°c nhi·ªÅu kh√¥ng?",
        (4, 30): "G·∫ßn ƒë·∫øn ng√†y Gi·∫£i ph√≥ng mi·ªÅn Nam r·ªìi, b√°c c√≥ k·ª∑ ni·ªám g√¨ v·ªÅ ng√†y n√†y kh√¥ng?",
        (5, 1): "H√¥m nay l√† ng√†y Qu·ªëc t·∫ø Lao ƒë·ªông, ngh·ªÅ nghi·ªáp b√°c th·ªùi tr·∫ª nh∆∞ th·∫ø n√†o?",
        (9, 2): "H√¥m nay l√† Qu·ªëc kh√°nh, b√°c y√™u Vi·ªát Nam th·∫ø n√†o?",
        (10, 20): "G·∫ßn ƒë·∫øn ng√†y Ph·ª• n·ªØ Vi·ªát Nam, b√°c t·ª± h√†o v·ªÅ ph·ª• n·ªØ Vi·ªát ƒëi·ªÅu g√¨?",
        (12, 25): "H√¥m nay l√† Gi√°ng sinh, b√°c c√≥ k·ª∑ ni·ªám g√¨ v·ªÅ m√πa l·ªÖ h·ªôi kh√¥ng?"
    }
    
    return cultural_events.get((month, day), "")

if __name__ == '__main__':
    print("=== CHATBOT T·ªêI ∆ØU CHO NG∆Ø·ªúI CAO TU·ªîI ===")
    print("Phi√™n b·∫£n n√¢ng c·∫•p v·ªõi Emotion AI & Response Optimization")
    print("C√°c t√≠nh nƒÉng m·ªõi:")
    print("‚úÖ Nh·∫≠n di·ªán c·∫£m x√∫c t·ª± ƒë·ªông")
    print("‚úÖ T·ªëi ∆∞u h√≥a ph·∫£n h·ªìi theo c·∫£m x√∫c")
    print("‚úÖ Lo·∫°i b·ªè l·ªói markdown v√† format")
    print("‚úÖ Chu·∫©n h√≥a c√°ch ƒë·ªçc s·ªë")
    print("‚úÖ T·ªëi ∆∞u chi ph√≠ token")
    print("‚úÖ Giao di·ªán sang tr·ªçng, hi·ªán ƒë·∫°i")
    print("=" * 50)
    
    # Ch·∫°y ·ª©ng d·ª•ng v·ªõi c√°c t·ªëi ∆∞u m·ªõi tr√™n port kh√°c ƒë·ªÉ tr√°nh conflict
    try:
        app.run(debug=True, port=5001, host='0.0.0.0')
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông server: {e}")
        print("Th·ª≠ ch·∫°y tr√™n port 5002...")
        app.run(debug=True, port=5002, host='0.0.0.0')
